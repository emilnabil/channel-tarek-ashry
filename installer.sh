#!/bin/sh
# ###########################################
echo "ZWNobyAiIFNDUklQVCA6IERPV05MT0FEIEFORCBJTlNUQUxMIENoYW5uZWxzICIKVE1QRElSPScvdG1wJwpQQUNLQUdFPSdhc3RyYS1zbScKTVlfVVJMPSdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW1pbG5hYmlsL2NoYW5uZWwtdGFyZWstYXNocnkvbWFpbicKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwpWRVJTSU9OPSQod2dldCAkTVlfVVJML3ZlcnNpb24gLXFPLSB8IGN1dCAtZCAiPSIgLWYyLSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwpCSU5QQVRIPS91c3IvYmluCkVUQ1BBVEg9L2V0YwpBU1RSQVBBVEg9JHtFVENQQVRIfS9hc3RyYQojIyMjIyMKQkJDUE1UPSR7QklOUEFUSH0vYmJjX3BtdF9zdGFydGVyLnNoCkJCQ1BZPSR7QklOUEFUSH0vYmJjX3BtdF92Ni5weQpCQkNFTklHTUE9JHtCSU5QQVRIfS9lbmlnbWEyX3ByZV9zdGFydC5zaAojIyMjIyMKU1lTQ09ORj0ke0VUQ1BBVEh9L3N5c2N0bC5jb25mCkFTVFJBQ09ORj0ke0FTVFJBUEFUSH0vYXN0cmEuY29uZgpBQkVSVElTQklOPSR7QVNUUkFQQVRIfS9zY3JpcHRzL2FiZXJ0aXMKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwpDT05GSUdwbXR0bXA9JHtUTVBESVJ9L2JiY19wbXRfdjYvYmJjX3BtdF9zdGFydGVyLnNoCkNPTkZJR3B5dG1wPSR7VE1QRElSfS9iYmNfcG10X3Y2L2JiY19wbXRfdjYucHkKQ09ORklHZW50bXA9JHtUTVBESVJ9L2JiY19wbXRfdjYvZW5pZ21hMl9wcmVfc3RhcnQuc2gKQ09ORklHc3lzY3RsdG1wPSR7VE1QRElSfS8ke1BBQ0tBR0V9L3N5c2N0bC5jb25mCkNPTkZJR2FzdHJhdG1wPSR7VE1QRElSfS8ke1BBQ0tBR0V9L2FzdHJhLmNvbmYKQ09ORklHYWJlcnRpc3RtcD0ke1RNUERJUn0vJHtQQUNLQUdFfS9hYmVydGlzCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKaWYgWyAtZiAvZXRjL29wa2cvb3BrZy5jb25mIF07IHRoZW4KICAgIFNUQVRVUz0nL3Zhci9saWIvb3BrZy9zdGF0dXMnCiAgICBPU1RZUEU9J09wZW5zb3VyY2UnCiAgICBPUEtHPSdvcGtnIHVwZGF0ZScKICAgIE9QS0dJTlNUQUw9J29wa2cgaW5zdGFsbCcKZmkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwpybSAtcmYgL2V0Yy9lbmlnbWEyL2xhbWVkYgpybSAtcmYgL2V0Yy9lbmlnbWEyLypsaXN0CnJtIC1yZiAvZXRjL2VuaWdtYTIvKi50dgpybSAtcmYgL2V0Yy9lbmlnbWEyLyoucmFkaW8Kcm0gLXJmIC9ldGMvdHV4Ym94LyoueG1sCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKaW5zdGFsbCgpIHsKICAgIGlmIGdyZXAgLXFzICJQYWNrYWdlOiAkMSIgJFNUQVRVUzsgdGhlbgogICAgICAgIGVjaG8KICAgIGVsc2UKICAgICAgICAkT1BLRyA+L2Rldi9udWxsIDI+JjEKICAgICAgICBlY2hvICIgICA+Pj4+ICAgTmVlZCB0byBpbnN0YWxsICQxICAgPDw8PCIKICAgICAgICBlY2hvCiAgICAgICAgJE9QS0dJTlNUQUwgIiQxIgogICAgICAgIHNsZWVwIDEKICAgICAgICBjbGVhcgogICAgZmkKfQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmlmIFsgJE9TVFlQRSA9ICJPcGVuc291cmNlIiBdOyB0aGVuCiAgICBmb3IgaSBpbiBkdmJzbm9vcCAkUEFDS0FHRTsgZG8KICAgICAgICBpbnN0YWxsICRpCiAgICBkb25lCmZpCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmNhc2UgJCh1bmFtZSAtbSkgaW4KYXJtdjdsKikgcGxhcmZvcm09ImFybSIgOzsKbWlwcyopIHBsYXJmb3JtPSJtaXBzIiA7Owplc2FjCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCnJtIC1yZiAke0FTVFJBQ09ORn0gJHtTWVNDT05GfQpybSAtcmYgJHtUTVBESVJ9L2NoYW5uZWxzX2JhY2t1cF91c2VyXyIke1ZFUlNJT059IiogYXN0cmEtKiBiYmNfcG10X3Y2KgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwplY2hvCnNldCAtZQplY2hvICJEb3dubG9hZGluZyBBbmQgSW5zYWxsaW5nIENoYW5uZWwgUGxlYXNlIFdhaXQgLi4uLi4uIgp3Z2V0ICRNWV9VUkwvY2hhbm5lbHNfYmFja3VwX2J5X3RhcmVrLWFzaHJ5LnRhci5neiAtcVAgJFRNUERJUgp0YXIgLXh6ZiAkVE1QRElSL2NoYW5uZWxzX2JhY2t1cF9ieV90YXJlay1hc2hyeS50YXIuZ3ogLUMgLwpzbGVlcCA1CnNldCArZQplY2hvICIiCnNsZWVwIDIKZWNobyAiIgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmlmIFsgLWYgJEJCQ1BNVCBdICYmIFsgLWYgJEJCQ1BZIF0gJiYgWyAtZiAkQkJDRU5JR01BIF07IHRoZW4KICAgIGVjaG8gIiAgID4+Pj4gICBBbGwgQ29uZmlnIEJCQyBGaWxlcyBmb3VuZCAgIDw8PDwiCiAgICBzbGVlcCAyCmVsc2UKICAgIHNldCAtZQogICAgZWNobyAiRG93bmxvYWRpbmcgQW5kIEluc2FsbGxpbmcgQ29uZmlnIEJCQyBQbGVhc2UgV2FpdCAuLi4uLi4iCiAgICB3Z2V0ICRNWV9VUkwvYmJjX3BtdF92Ni50YXIuZ3ogLXFQICRUTVBESVIKICAgIHRhciAteHpmICRUTVBESVIvYmJjX3BtdF92Ni50YXIuZ3ogLUMgJFRNUERJUgogICAgc2V0ICtlCiAgICBjaG1vZCAtUiA3NTUgJHtUTVBESVJ9L2JiY19wbXRfdjYKICAgIHNsZWVwIDEKICAgIGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIKICAgCiAgICBlY2hvICItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCmZpCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmlmIFsgJE9TVFlQRSA9ICJPcGVuc291cmNlIiBdOyB0aGVuCiAgICBpZiBbIC1mICRBU1RSQUNPTkYgXSAmJiBbIC1mICRBQkVSVElTQklOIF0gJiYgWyAtZiAkU1lTQ09ORiBdOyB0aGVuCiAgICAgICAgZWNobyAiICAgPj4+PiAgIEFsbCBDb25maWcgJFBBQ0tBR0UgRmlsZXMgZm91bmQgICA8PDw8IgogICAgICAgIHNsZWVwIDIKICAgIGVsc2UKICAgICAgICBzZXQgLWUKICAgICAgICBlY2hvICJEb3dubG9hZGluZyBDb25maWcgJFBBQ0tBR0UgUGxlYXNlIFdhaXQgLi4uLi4uIgogICAgICAgIHdnZXQgJE1ZX1VSTC9hc3RyYS0iJHtwbGFyZm9ybX0iLnRhci5neiAtcVAgJFRNUERJUgogICAgICAgIHRhciAteHpmICRUTVBESVIvYXN0cmEtIiR7cGxhcmZvcm19Ii50YXIuZ3ogLUMgJFRNUERJUgogICAgICAgIHNldCArZQogICAgICAgIGNobW9kIC1SIDc1NSAke1RNUERJUn0vJHtQQUNLQUdFfQogICAgICAgIHNsZWVwIDEKICAgICAgICBlY2hvICItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCiAgICAgICAgaWYgWyAhIC1mICRTWVNDT05GIF07IHRoZW4KICAgICAgICAgICAgY3AgLWYgJENPTkZJR3N5c2N0bHRtcCAkRVRDUEFUSCA+L2Rldi9udWxsIDI+JjEKICAgICAgICAgICAgZWNobyAiW3NlbmQgKHN5c2N0bC5jb25mKSBmaWxlXSIKICAgICAgICBmaQogICAgICAgIGlmIFsgISAtZiAkQVNUUkFDT05GIF07IHRoZW4KICAgICAgICAgICAgY3AgLWYgJENPTkZJR2FzdHJhdG1wICRBU1RSQVBBVEggPi9kZXYvbnVsbCAyPiYxCiAgICAgICAgICAgIGVjaG8gIltzZW5kIChhc3RyYS5jb25mKSBmaWxlXSIKICAgICAgICBmaQogICAgICAgIGlmIFsgISAtZiAkQUJFUlRJU0JJTiBdOyB0aGVuCiAgICAgICAgICAgIGNwIC1mICRDT05GSUdhYmVydGlzdG1wICRBU1RSQVBBVEgvc2NyaXB0cyA+L2Rldi9udWxsIDI+JjEKICAgICAgICAgICAgZWNobyAiW3NlbmQgKGFiZXJ0aXMpIGZpbGVdIgogICAgICAgIGZpCiAgICAgICAgZWNobyAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIgogICAgZmkKZmkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKcm0gLXJmICR7VE1QRElSfS9jaGFubmVsc19iYWNrdXBfYnlfdGFyZWstYXNocnkudGFyLmd6CnJtIC1yZiAke1RNUERJUn0vKiBhc3RyYS0Kcm0gLXJmICR7VE1QRElSfS8qIGJiY19wbXRfdjYKCnN5bmMKZWNobyAiIgplY2hvICIiCmVjaG8gIioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiIKZWNobyAiIyAgICAgICBDaGFubmVsIEFuZCBDb25maWcgSU5TVEFMTEVEIFNVQ0NFU1NGVUxMWSAgICAgICAjIgplY2hvICIgICBVUExPQURFRCBCWSAgPj4+PiAgIEVNSUxfTkFCSUwgIiAgIApzbGVlcCA0OwoJZWNobyAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScKZWNobyAiIyAgICAgICAgICAgICAgICAgICAgJHtWRVJTSU9OfSAgICAgICAgICAgICAgICAgICAgICAgICAjIiAgICAgICAgICAgICAgICAgCmVjaG8gIioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiIKZWNobyAiIyAgICAgICAgICAgeW91ciBEZXZpY2Ugd2lsbCBSRVNUQVJUIE5vdyAgICAgICAgICAgICAgICAjIgplY2hvICIqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioiCnNsZWVwIDIKCmlmIFsgJE9TVFlQRSA9ICJPcGVuc291cmNlIiBdOyB0aGVuCiAgICBpbml0IDYKZWxzZQogICAgc3lzdGVtY3RsIHJlc3RhcnQgZW5pZ21hMgpmaQoKZXhpdCAwCg==" | base64 -d | sh


